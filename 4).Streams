Q1).Java Program to illustrate FILTER & COLLECT Operations.
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Streams {
    public static void main(String[] args) {
        ArrayList<Integer> al = new ArrayList<Integer>();
        al.add(2);
        al.add(6);
        al.add(9);
        al.add(4);
        al.add(20);
        System.out.println("Printing the collection: " + al);
        System.out.println();
        List<Integer> Ls = al.stream()
                .filter(i -> i % 2 == 0)
                .collect(Collectors.toList());
        System.out.println("Printing the list after stream operation:" + Ls);
    }
}

Q2) Stream :---
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Streams {
    public static void main(String[] args) {
        List<Integer> list = Arrays.asList(1,2,3,4,5,6,7,765,869,9,0);
//        List<Integer> filterList = list.stream().filter(x -> x % 2 == 0).collect(Collectors.toList());
//        System.out.println(filterList);
//        List<Integer> mappedList = filterList.stream().map(x -> x / 2).collect(Collectors.toList());
//        System.out.println(mappedList);


//        List<Integer> filterList = list.stream().filter(x-> x% 2==0).map(x-> x/2)
//                .distinct().sorted((a,b)-> (b - a)).limit(4)
//                .skip(1).collect(Collectors.toList());
////        System.out.println(filterList);
//        List<Integer> collect = Stream.iterate(0,x-> x+1).limit(101).skip(1)
//                .filter(x -> x % 2 == 0).map(x-> x/10)
//                .distinct().sorted().peek(x-> System.out.println(x)).collect(Collectors.toList());
//        System.out.println(collect);

//        Long integer = Stream.iterate(0, x -> x + 1).limit(101).map(x -> x / 20).distinct().count();
//                .peek(System.out::println).max((a, b) -> a - b).get();
//        System.out.println(integer);

        list.parallelStream();
        
    }
}

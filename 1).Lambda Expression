Q1)Java program to demonstrate lambda expressions to implement a user defined functional interface.
   interface FuncInterface{
   void abstractFun(int x);
    default void normalFun(){
    System.out.println("Hello");
    }
    }

   public class LambdaExpression {
   public static void main(String[] args) {
   FuncInterface fobj= (int x) -> System.out.println(2*x);
   fobj.abstractFun(8);
     }
      }

Q2)simple lambda expressions.
   import java.util.ArrayList;

   class LambdaExpression{
    public static void main(String[] args) {
    ArrayList<Integer> arr = new ArrayList<Integer>();
     arr.add(1);
     arr.add(2);
      arr.add(3);

      arr.forEach(n-> System.out.println(n));
      arr.forEach(n->{if(n%2==0)
      System.out.println(n);
     });
    }
    }

Q3) Lambda expression with no parameters.
   interface Test1{
 void print();
}
 class LambdaExpression{
 static void fun(Test1 t) {t.print();}

  public static void main(String[] args) {
   fun(() -> System.out.println("Hello"));
  }
 }

Q4) Lambda expression with a single parameter.
interface Test2{
    void print(Integer p);
}
class LambdaExpression{
    static void fun(Test2 t,Integer p){ t.print(p);}

    public static void main(String[] args) {
        fun(p -> System.out.println(p),10);
    }
}

Q5) Lambda expression with multi parameters.
   interface Test3{
    void print(Integer p1, Integer p2);
  }
   class LambdaExpression{
    static void fun(Test3 t,Integer p1,Integer p2){
        t.print(p1,p2);
    }

    public static void main(String[] args) {
        fun((p1,p2)-> System.out.println(p1+p2),10,20);
}}

Q6) Lambda expression with two parameters.
  interface Test{
    boolean test(int n , int d);
  }
    class LambdaExpression{
        public static void main(String[] args) {
            Test isFactor= (n,d) -> (n%d)==0;
            if(isFactor.test(10,2))
                System.out.println("is factor");
            if(!isFactor.test(10,3))
                System.out.println("is not factor");
        }
    }

Q7) Sorting ArrayList using Lambda Expression Using lambda expression in place of comparator object for defining our own sorting in collections.
    import java.util.ArrayList;
    import java.util.Collections;

     public class LambdaExpression {
     public static void main(String[] args) {
       ArrayList<Integer> al = new ArrayList<>();
       al.add(2);
       al.add(3);
       al.add(4);
       al.add(7);
       al.add(9);
      System.out.println(al);
      Collections.sort(al,((o1, o2) -> (o1>o2) ? -1:(o1<o2)?1:0));
       System.out.println(al);
     }
   }

Q8) Sorting TreeSet using Lambda Expression.
  public class LambdaExpression {
 public static void main(String[] args) {
  TreeSet<Integer> h= new TreeSet<Integer>((o1,o2) -> (o1 > o2) ? -1:(o1 < o2) ? 1:0);
  h.add(41);
  h.add(6);
  h.add(3);
  h.add(2);
  System.out.println(h);
 }
}

Q9) Sorting elements of TreeMap using Lambda Expression: Sorting will be done on the basis of the keys and not its value. 
    public class LambdaExpression {
    public static void main(String[] args) {
     TreeMap<Integer, String> m= new TreeMap<>((o1, o2) -> (o1 > o2)? -1:(o1<o2)?1:0);
     m.put(1,"apple");
    m.put(2,"mango");
    m.put(3,"litchi");
     m.put(4,"banana");
     System.out.println(m);
   }
  }

Q10)Reverse comparator via a lambda expression directly in the call to the TreeSet() constructor.
  public class LambdaExpression {
   public static void main(String[] args) {
  TreeSet<String> ts= new TreeSet<>((aStr,bStr)-> bStr.compareTo(aStr));
  ts.add("A");
  ts.add("B");
  ts.add("C");
  ts.add("D");
  for(String element : ts)
   System.out.println(element);
 }
} 

Q11) Thread using lambda Expression.
public class LambdaExpression {
    public static void main(String[] args) {
        Runnable runnable=()-> {
            for(int i=0; i<=10;i++){
                System.out.println("Hello "+ i);
            }
        };
        Thread childThread= new Thread(runnable);
        childThread.run();
    }
}

Q12) Creating Lambda expression for run() method in functional interface "Runnable".
public class LambdaExpression {
    public static void main(String[] args) {
        Runnable myThread = ()-> {
            Thread.currentThread().setName("MyThread");
            System.out.println(Thread.currentThread().getName()+"is running");
        };
        Thread run = new Thread(myThread);
        run.start();
    }
}

Q13) Multithreading using lambda expressions.
public class LambdaExpression {
    public static void main(String[] args) {
        Runnable basic =()-> {
            String threadName = Thread.currentThread().getName();
            System.out.println("Running common task by " + threadName);
        };
        Thread thread1 = new Thread(basic);
        Thread thread2 = new Thread(basic);
    thread1.start();
    thread2.start();
    }
}

Q14) Serialization and Deserialization of lambda Expression.
//serialize
package Java8;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

public class Serial {
    public static void main(String[] args) throws IOException {
        LambdaExpression lambdaExpression = new LambdaExpression("kumari somya","somya@gamil.com",20,"bihar");
        FileOutputStream fos = new FileOutputStream("ob.txt");
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(lambdaExpression);
        oos.close();
        oos.close();
        System.out.println("Object stated is transfered to file ob!!");
    }
}

//Deserialize
package Java8;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class Deserial {
    public static void main(String[] args) {
        try{
            FileInputStream fis = new FileInputStream("ob.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);
            LambdaExpression lambdaExpression = (LambdaExpression) ois.readObject();
            lambdaExpression.displayName();
            System.out.println(lambdaExpression.getName());
            System.out.println(lambdaExpression.getEmail());
            System.out.println(lambdaExpression.getAge());
            System.out.println(lambdaExpression.getAddress());
        }catch(IOException ex){
            ex.printStackTrace();
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }
}

//class implementation
public class LambdaExpression implements Serializable {
    private String name;
    transient private String email;
    private int age;
    private String address;

    public LambdaExpression(String name, String email, int age, String address) {
        this.name = name;
        this.email = email;
        this.age = age;
        this.address = address;
    }

    public LambdaExpression() {
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void displayName(){
        System.out.println("Hi My name is "+this.name);
    }
}

Q15) Single Lambda Expression.
  @FunctionalInterface
     interface MyNumber {
      double getValue();
}

public class LambdaDemo1 {
    public static void main(String[] args) {
        MyNumber myNumber;
        myNumber = () -> 123.45;
        System.out.println("A fixed value: "+ myNumber.getValue());

        myNumber = () -> Math.random()*100;
        System.out.println("A random value: "+ myNumber.getValue());
        System.out.println("Another random value: "+ myNumber.getValue());

    }
}

Q16) Block Lambda Expression.
@FunctionalInterface
interface NumericFunc {
    int func(int n);
}

public class LambdaDemo1 {
    public static void main(String[] args) {
        NumericFunc factorial = (n) -> {
            int result = 1;
            for(int i=1;i<=n;i++)
                result = i* result;
            return result;
        };
        System.out.println("the factorial of 3 is "+ factorial.func(3));
        System.out.println("the factoral of 5 is "+ factorial.func(5));
    }
}

Q17) Block Lambda Expression.
@FunctionalInterface
interface StringFunc {
    String func(String n);
}

public class LambdaDemo1 {
    public static void main(String[] args) {
        StringFunc reverse = (str) -> {
            String result ="";
            int i;
            for(i=str.length()-1;i >=0;i--)
                result += str.charAt(i);
            return result;
        };
        System.out.println("Lambda reversed is "+ reverse.func("Lambda"));
        System.out.println("Expression reversed is "+ reverse.func("Expression"));
    }
}

Q18) Converting Arraylist to Hashmap in java 8 using a lambda expression.
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LambdaDemo1 {
    private Integer key;
    private String value;

    public LambdaDemo1(Integer key, String value) {
        this.key = key;
        this.value = value;
    }

    public Integer getKey() {
        return key;
    }

    public String getValue() {
        return value;
    }
}

     class Main{
        public static void main(String[] args) {
            List<LambdaDemo1> list = new ArrayList<LambdaDemo1>();
            list.add(new LambdaDemo1(1,"I"));
            list.add(new LambdaDemo1(2,"Love"));
            list.add(new LambdaDemo1(3,"myself"));

            Map<Integer,String> map = new HashMap<>();
            list.forEach((n)-> {map.put(n.getKey(),n.getValue());});
            System.out.println("Map:" + map);
        }
    }

Q19) Check if a String contains only Alphabets in java using Lambda Expression.
public class LambdaDemo1 {
    public static boolean isStringOnlyAlphabet(String str){
        return(
                (str!=null)&&(!str.equals(" ")) &&(str.chars().allMatch(Character::isLetter)));
    }

    public static void main(String[] args) {
        System.out.println("Test case1:");
        String str1 = "somya";
        System.out.println("Input:"+str1);
        System.out.println("output:"+isStringOnlyAlphabet(str1));
        System.out.println("/n Test case2:");
        String str2 ="simmi";
        System.out.println("Input:"+str2);
        System.out.println("output:"+isStringOnlyAlphabet(str2));
        System.out.println("/n Test case 3:");
        String str3=null;
        System.out.println("Input:"+str3);
        System.out.println("output:"+isStringOnlyAlphabet(str3));
        System.out.println("/nTest case 4:");
        String str4 ="  ";
        System.out.println("Input:"+str4);
        System.out.println("output:"+isStringOnlyAlphabet(str4));
    }
}

Q20)Remove elements from a List that satisfy given predicate in Java.
i)Using iterator:
   Below program demonstrates the removal of null elements from the list, using the Predicate  :
// Java Program to remove nulls
// from a List using iterator and Predicate
import java.util.function.Predicate;
import java.util.*;

class GFG {

	// Generic function to remove Null Using Iterator
	public static <T> List<T>
	removeNullUsingIterator(List<T> l, Predicate<T> p)
	{

		// Create an iterator from the l
		Iterator<T> itr = l.iterator();

		// Find and remove all null
		while (itr.hasNext()) {

			// Fetching the next element
			T t = itr.next();

			// Checking for Predicate condition
			if (!p.test(t)) {

				// If the condition matches,
				// remove that element
				itr.remove();
			}
		}

		// Return the null
		return l;
	}

	public static void main(String[] args)
	{

		// Create the l with null values
		List<String> l = new ArrayList<>(
			Arrays.asList("Geeks",
							null,
							"forGeeks",
							null,
							"A computer portal"));

		// Print the list
		System.out.println("List with null values: " + l);

		// Creating a Predicate condition checking for null
		Predicate<String> isNull = item -> Objects.nonNull(item);

		// Removing nulls using iterator and Predicate
		l = removeNullUsingIterator(l, isNull);

		// Print the list
		System.out.println("List with null values removed: " + l);
	}
}
ii) Using List.removeAll() :
 // Java Program to remove 10
// from a List using List.removeAll() and Predicate
import java.util.function.Predicate;
import java.util.*;

class GFG {

	// Generic function to remove elements using Predicate
	public static <T> List<T>
	removeElements(List<T> l, Predicate<T> p)
	{

		// Create collection using Predicate
		Collection<T> collection = new ArrayList<>();

		for (T t : l) {
			if (p.test(t)) {
				collection.add(t);
			}
		}

		// Print the list
		System.out.println("Collection to be removed: " + collection);

		// Removing 10 using List.removeAll()
		// passing a collection
		l.removeAll(collection);

		// Return the list
		return l;
	}

	public static void main(String[] args)
	{

		// Create a list with null values
		List<String> l = new ArrayList<>(
			Arrays.asList("1", "10", "15", "10", "12", "5", "10", "20"));

		// Print the list 
		System.out.println("Original List: " + l);

		// Creating a Predicate condition checking for 10
		Predicate<String> is10 = i -> (i == "10");

		// Removing using Predicate
		l = removeElements(l, is10);

		// Print the list
		System.out.println("Updated List: " + l);
	}
}

iii)Using Lambdas (Java 8):
// Java Program to remove nulls
// from a List using Java 8
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.*;

class GFG {

	// Generic function to remove elements using Predicate
	public static <T> List<T>
	removeElements(List<T> l, Predicate<T> p)
	{

		// Removing nulls using Java Stream
		// using Predicate condition in lambda expression
		l = l.stream()
				.filter(p)
				.collect(Collectors.toList());

		// Return the list 
		return l;
	}

	public static void main(String[] args)
	{

		// Create a list with null values
		List<String> l = new ArrayList<>(
			Arrays.asList("Geeks",
						null,
						"forGeeks",
						null,
						"A computer portal"));

		// Print the list 
		System.out.println("List with null values: " + l);

		// Creating a Predicate condition checking for null
		Predicate<String> isNull = i -> (i != null);

		// Removing using Predicate
		l = removeElements(l, isNull);

		// Print the list 
		System.out.println("List with null values removed: " + l);
	}
}

iv)Using removeIf() :
// Java Program to remove nulls
// from a List using Java 8
import java.util.function.Predicate;
import java.util.*;

class GFG {

	// Generic function to remove elements using Predicate
	public static <T> List<T>
	removeElements(List<T> l, Predicate<T> p)
	{

		// Removing nulls using Java Stream
		// using Predicate condition in removeIf()
		l.removeIf(x -> p.test(x));

		// Return the list 
		return l;
	}

	public static void main(String[] args)
	{

		// Create a list with null values
		List<String> l = new ArrayList<>(
			Arrays.asList("Geeks",
						null,
						"forGeeks",
						null,
						"A computer portal"));

		// Print the list
		System.out.println("List with null values: " + l);

		// Creating a Predicate condition checking for null
		Predicate<String> isNull = i -> (i == null);

		// Removing using Predicate
		l = removeElements(l, isNull);

		// Print the list
		System.out.println("List with null values removed: " + l);
	}
}



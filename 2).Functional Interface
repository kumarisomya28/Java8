Q1) Java program to demonstrate Implementation of functional interface using lambda expressions.
 public class FunctionalInterface {
    public static void main(String[] args) {
        new Thread(() -> {
            System.out.println("New thread created");
        }).start();
    }
}

Q2) Java program to demonstrate lambda expressions to implement a user defined functional interface.
   @java.lang.FunctionalInterface
   interface Square{
   int calculate(int x);
   }

   public class FunctionalInterface {
   public static void main(String[] args) {
        int a=5;
        Square s = (int x)-> x*x;
        int ans = s.calculate(a);
        System.out.println(ans);
     }
 }

Q3) Java Program to demonstrate Consumer's accept() method.
   import java.util.ArrayList;
   import java.util.List;
    import java.util.function.Consumer;

      public class FunctionalInterface {
      public static void main(String[] args) {
        Consumer<Integer> display = a-> System.out.println(a);
        display.accept(10);
        Consumer<List<Integer>> modify =List -> {
            for(int i=0;i< List.size();i++)
                List.set(i,2* List.get(i));
            };
        Consumer<List<Integer>> displist = list -> list.stream().forEach(a-> System.out.print(a+ " "));
        List<Integer> list = new ArrayList<Integer>();
        list.add(2);
        list.add(1);
        list.add(3);
        modify.accept(list);
        displist.accept(list);
        } }

Q4) Java Program to demonstrate Consumer's andThen() method.
   import java.util.ArrayList;
   import java.util.List;
   import java.util.function.Consumer;

  public class FunctionalInterface {
    public static void main(String[] args) {
        Consumer<List<Integer>> modify= list -> {
            for(int i=0;i< list.size();i++)
                list.set(i,2* list.get(i));
        };
        Consumer<List<Integer>> displist = list-> list.stream().forEach(a-> System.out.print(a+ " "));
        List<Integer> list = new ArrayList<Integer>();
        list.add(2);
        list.add(1);
        list.add(3);
        modify.andThen(displist).accept(list);
        ;
    }
}

Q5) To demonstrate when NullPointerException is returned.
  import java.util.ArrayList;
  import java.util.List;
  import java.util.function.Consumer;

public class FunctionalInterface {
    public static void main(String[] args) {
        Consumer<List<Integer>> modify= list -> {
            for(int i=0;i< list.size();i++)
                list.set(i,2* list.get(i));
        };
        Consumer<List<Integer>> displist = list-> list.stream().forEach(a-> System.out.print(a+ " "));
        List<Integer> list = new ArrayList<Integer>();
        list.add(2);
        list.add(1);
        list.add(3);
        try{
            modify.andThen(null).accept(list);
        } catch (Exception e){
            System.out.println("Exception: "+e);
        }
    }
}

Q6)  To demonstrate how an Exception in the after function is returned and handled.
  import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Consumer;

public class FunctionalInterface {
    public static void main(String[] args) {
        Consumer<List<Integer>> modify= list -> {
            for(int i=0;i< list.size();i++)
                list.set(i,2* list.get(i));
        };
        Consumer<List<Integer>> displist = list-> list.stream().forEach(a-> System.out.print(a+ " "));
        List<Integer> list = new ArrayList<Integer>();
        list.add(2);
        list.add(1);
        list.add(3);
        try{
            displist.andThen(modify).accept(list);
        } catch (Exception e){
            System.out.println("Exception: "+e);
        }
    }
}

Q7)  Java Program to demonstrate BiConsumer's accept() method.
    Program to compare 2 list of integers using BiConsumerâ€™s accept() method:

  import java.util.ArrayList;
  import java.util.List;
  import java.util.function.BiConsumer;

public class FunctionalInterface {
    public static void main(String[] args) {
        List<Integer> lista = new ArrayList<Integer>();
        lista.add(2);
        lista.add(1);
        lista.add(3);
        List<Integer> listb = new ArrayList<Integer>();
        listb.add(2);
        listb.add(1);
        listb.add(2);

        BiConsumer<List<Integer>, List<Integer>> equals = (List1, List2) -> {
            if(List1.size()!= List2.size()){
                System.out.println("false");
            }else {
                for(int i= 0;i< List1.size();i++)
                if(List1.get(i)!= List2.get(i)){
                    System.out.println("false");
                    return;
                }
                System.out.println("True");
            }
        };
        equals.accept(lista, listb);
    }
}

Q8)  illustrate andThen() method:
   import java.util.ArrayList;
   import java.util.List;
   import java.util.function.BiConsumer;

public class FunctionalInterface {
    public static void main(String[] args) {
        List<Integer> lista = new ArrayList<Integer>();
        lista.add(2);
        lista.add(1);
        lista.add(3);
        List<Integer> listb = new ArrayList<Integer>();
        listb.add(2);
        listb.add(1);
        listb.add(2);
        BiConsumer<List<Integer>, List<Integer>> equals = (list1, list2)-> {
            if (list1.size() != list2.size()) {
                System.out.println("false");
            } else {
                for (int i = 0; i < list1.size(); i++)
                    if (list1.get(i) != list2.get(i)) {
                        System.out.println("false");
                        return;
                    }
                System.out.println("True");
            }
        };
      BiConsumer<List<Integer>, List<Integer>> disp =(list1,list2)->{
          list1.stream().forEach(a-> System.out.print(a + " "));
          System.out.println();
          list2.stream().forEach(a-> System.out.print(a+ " "));
          System.out.println();
    };
      equals.andThen(disp).accept(lista,listb);
}
}

Q9) To demonstrate when NullPointerException is returned.
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.BiConsumer;

public class FunctionalInterface {
    public static void main(String[] args) {
        List<Integer> lista = new ArrayList<Integer>();
        lista.add(2);
        lista.add(1);
        lista.add(3);
        List<Integer> listb = new ArrayList<Integer>();
        listb.add(2);
        listb.add(1);
        listb.add(2);
        BiConsumer<List<Integer>, List<Integer>> equals = (list1, list2)-> {
            if (list1.size() != list2.size()) {
                System.out.println("false");
            } else {
                for (int i = 0; i < list1.size(); i++)
                    if (list1.get(i) != list2.get(i)) {
                        System.out.println("false");
                        return;
                    }
                System.out.println("True");
            }
        };
      BiConsumer<List<Integer>, List<Integer>> disp =(list1,list2)->{
          list1.stream().forEach(a-> System.out.print(a + " "));
          System.out.println();
          list2.stream().forEach(a-> System.out.print(a+ " "));
          System.out.println();
    };
      try {
          equals.andThen(null).accept(lista,listb);
      }catch(Exception e){
          System.out.println("Exception: "+ e);
      }
}
}

Q10) To demonstrate how an Exception in after the function is returned and handled.
  import java.util.ArrayList;
  import java.util.List;
  import java.util.function.BiConsumer;

public class Main {
    public static void main(String args[])
    {

        // Create first list
        List<Integer> lista = new ArrayList<Integer>();
        lista.add(2);
        lista.add(1);
        lista.add(3);

        // Create second list
        List<Integer> listb = new ArrayList<Integer>();
        listb.add(2);
        listb.add(1);

        // BiConsumer to compare 2 lists of integers
        BiConsumer<List<Integer>, List<Integer> > equals = (list1, list2) ->
        {
            for (int i = 0; i < list1.size(); i++)
                if (list1.get(i) != list2.get(i)) {
                    System.out.println("False");
                    return;
                }
            System.out.println("True");
        };

        // BiConsumer to print 2 lists
        BiConsumer<List<Integer>, List<Integer> > disp = (list1, list2) ->
        {
            list1.stream().forEach(a -> System.out.print(a + " "));
            System.out.println();
            list2.stream().forEach(a -> System.out.print(a + " "));
            System.out.println();
        };

        try {
            disp.andThen(equals).accept(lista, listb);
        }
        catch (Exception e) {
            System.out.println("Exception : " + e);
        }
    }
}
